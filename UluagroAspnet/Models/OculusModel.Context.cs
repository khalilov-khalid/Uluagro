//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UluagroAspnet.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OculusEntities : DbContext
    {
        public OculusEntities()
            : base("name=OculusEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Action> Actions { get; set; }
        public virtual DbSet<CATEGORy> CATEGORIES { get; set; }
        public virtual DbSet<CATEGORIES_WORK_CATEGORY> CATEGORIES_WORK_CATEGORY { get; set; }
        public virtual DbSet<DAYLY_WORK_PLAN> DAYLY_WORK_PLAN { get; set; }
        public virtual DbSet<FERTILIZER> FERTILIZERs { get; set; }
        public virtual DbSet<FERTILIZER_STOCK> FERTILIZER_STOCK { get; set; }
        public virtual DbSet<FERTILIZER_WORK_PLAN> FERTILIZER_WORK_PLAN { get; set; }
        public virtual DbSet<FIRM> FIRMS { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<GROUP> GROUPs { get; set; }
        public virtual DbSet<MAIN_COMPONENTS> MAIN_COMPONENTS { get; set; }
        public virtual DbSet<MARK> MARKS { get; set; }
        public virtual DbSet<PACKING> PACKINGs { get; set; }
        public virtual DbSet<PARCEL> PARCELs { get; set; }
        public virtual DbSet<PARCEL_CATEGORY> PARCEL_CATEGORY { get; set; }
        public virtual DbSet<Profession> Professions { get; set; }
        public virtual DbSet<QueuePlan> QueuePlans { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<STATUSMODIFY> STATUSMODIFies { get; set; }
        public virtual DbSet<TECHNIQUE_CONDITION> TECHNIQUE_CONDITION { get; set; }
        public virtual DbSet<TECHNIQUE_TRAILER> TECHNIQUE_TRAILER { get; set; }
        public virtual DbSet<TECHNIQUE_TYPE> TECHNIQUE_TYPE { get; set; }
        public virtual DbSet<TECHNIQUE_WORKING_TYPE> TECHNIQUE_WORKING_TYPE { get; set; }
        public virtual DbSet<TECHNIQUE> TECHNIQUES { get; set; }
        public virtual DbSet<UNIT> UNITS { get; set; }
        public virtual DbSet<USERADMINSTATU> USERADMINSTATUS { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<WORK_PLAN> WORK_PLAN { get; set; }
        public virtual DbSet<WORK_PLAN_MODIFY> WORK_PLAN_MODIFY { get; set; }
        public virtual DbSet<WORK_PLAN_TECHNIQUE> WORK_PLAN_TECHNIQUE { get; set; }
        public virtual DbSet<WORK_PLAN_WORKERS> WORK_PLAN_WORKERS { get; set; }
        public virtual DbSet<Worker> Workers { get; set; }
        public virtual DbSet<WORK> WORKS { get; set; }
        public virtual DbSet<WORKS_CATEGORY> WORKS_CATEGORY { get; set; }
        public virtual DbSet<CURRENT_ACCOUNT> CURRENT_ACCOUNT { get; set; }
        public virtual DbSet<PAYMENT_INOUT> PAYMENT_INOUT { get; set; }
        public virtual DbSet<PAYMENT_TYPE> PAYMENT_TYPE { get; set; }
        public virtual DbSet<PAYMENT> PAYMENTs { get; set; }
        public virtual DbSet<PVOT_S> PVOT_S { get; set; }
        public virtual DbSet<STOCKPLACE> STOCKPLACES { get; set; }
        public virtual DbSet<STOCK> STOCKS { get; set; }
        public virtual DbSet<STOCKMODIFY> STOCKMODIFies { get; set; }
        public virtual DbSet<CROP> CROPs { get; set; }
        public virtual DbSet<CROP_SORT> CROP_SORT { get; set; }
        public virtual DbSet<CROP_REPRODUCTION> CROP_REPRODUCTION { get; set; }
        public virtual DbSet<MESSAGENOTIFICATION> MESSAGENOTIFICATIONs { get; set; }
        public virtual DbSet<PLANNINGPLAN> PLANNINGPLANs { get; set; }
        public virtual DbSet<PLANNINGPLANDETAIL> PLANNINGPLANDETAILS { get; set; }
        public virtual DbSet<PLANNINGPLANDETAILSWORK> PLANNINGPLANDETAILSWORKS { get; set; }
        public virtual DbSet<PLANINGPLANBYDETAIL> PLANINGPLANBYDETAILS { get; set; }
        public virtual DbSet<MYSILOSTOCK> MYSILOSTOCKs { get; set; }
        public virtual DbSet<MYSILOSTOCKDETAIL> MYSILOSTOCKDETAILS { get; set; }
        public virtual DbSet<DOCMESSAGE> DOCMESSAGEs { get; set; }
        public virtual DbSet<DOCUMENT> DOCUMENTS { get; set; }
        public virtual DbSet<MYSILO> MYSILOes { get; set; }
        public virtual DbSet<WOKRPLAN2TASKQUEUETECHNICAL> WOKRPLAN2TASKQUEUETECHNICAL { get; set; }
        public virtual DbSet<WORKPLAN2> WORKPLAN2 { get; set; }
        public virtual DbSet<WORKPLAN2PARCELS> WORKPLAN2PARCELS { get; set; }
        public virtual DbSet<WORKPLAN2QUEUEWORKERS> WORKPLAN2QUEUEWORKERS { get; set; }
        public virtual DbSet<WORKPLAN2TASKFELTILIZER> WORKPLAN2TASKFELTILIZER { get; set; }
        public virtual DbSet<WORKPLAN2TASKQUEUE> WORKPLAN2TASKQUEUE { get; set; }
        public virtual DbSet<WORKPLAN2TASKS> WORKPLAN2TASKS { get; set; }
    
        public virtual int StorkTest1(Nullable<int> pRODUCT_ID, Nullable<int> tYPE, Nullable<int> qUANTITY, Nullable<System.DateTime> cREATED_DATA, Nullable<System.DateTime> eND_DATA, Nullable<int> pLACE, string sPEC)
        {
            var pRODUCT_IDParameter = pRODUCT_ID.HasValue ?
                new ObjectParameter("PRODUCT_ID", pRODUCT_ID) :
                new ObjectParameter("PRODUCT_ID", typeof(int));
    
            var tYPEParameter = tYPE.HasValue ?
                new ObjectParameter("TYPE", tYPE) :
                new ObjectParameter("TYPE", typeof(int));
    
            var qUANTITYParameter = qUANTITY.HasValue ?
                new ObjectParameter("QUANTITY", qUANTITY) :
                new ObjectParameter("QUANTITY", typeof(int));
    
            var cREATED_DATAParameter = cREATED_DATA.HasValue ?
                new ObjectParameter("CREATED_DATA", cREATED_DATA) :
                new ObjectParameter("CREATED_DATA", typeof(System.DateTime));
    
            var eND_DATAParameter = eND_DATA.HasValue ?
                new ObjectParameter("END_DATA", eND_DATA) :
                new ObjectParameter("END_DATA", typeof(System.DateTime));
    
            var pLACEParameter = pLACE.HasValue ?
                new ObjectParameter("PLACE", pLACE) :
                new ObjectParameter("PLACE", typeof(int));
    
            var sPECParameter = sPEC != null ?
                new ObjectParameter("SPEC", sPEC) :
                new ObjectParameter("SPEC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StorkTest1", pRODUCT_IDParameter, tYPEParameter, qUANTITYParameter, cREATED_DATAParameter, eND_DATAParameter, pLACEParameter, sPECParameter);
        }
    
        public virtual int StorkTest(Nullable<int> pRODUCT_ID, Nullable<int> tYPE, Nullable<int> qUANTITY, Nullable<System.DateTime> cREATED_DATA, Nullable<System.DateTime> eND_DATA, Nullable<int> pLACE, string sPEC)
        {
            var pRODUCT_IDParameter = pRODUCT_ID.HasValue ?
                new ObjectParameter("PRODUCT_ID", pRODUCT_ID) :
                new ObjectParameter("PRODUCT_ID", typeof(int));
    
            var tYPEParameter = tYPE.HasValue ?
                new ObjectParameter("TYPE", tYPE) :
                new ObjectParameter("TYPE", typeof(int));
    
            var qUANTITYParameter = qUANTITY.HasValue ?
                new ObjectParameter("QUANTITY", qUANTITY) :
                new ObjectParameter("QUANTITY", typeof(int));
    
            var cREATED_DATAParameter = cREATED_DATA.HasValue ?
                new ObjectParameter("CREATED_DATA", cREATED_DATA) :
                new ObjectParameter("CREATED_DATA", typeof(System.DateTime));
    
            var eND_DATAParameter = eND_DATA.HasValue ?
                new ObjectParameter("END_DATA", eND_DATA) :
                new ObjectParameter("END_DATA", typeof(System.DateTime));
    
            var pLACEParameter = pLACE.HasValue ?
                new ObjectParameter("PLACE", pLACE) :
                new ObjectParameter("PLACE", typeof(int));
    
            var sPECParameter = sPEC != null ?
                new ObjectParameter("SPEC", sPEC) :
                new ObjectParameter("SPEC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StorkTest", pRODUCT_IDParameter, tYPEParameter, qUANTITYParameter, cREATED_DATAParameter, eND_DATAParameter, pLACEParameter, sPECParameter);
        }
    }
}
